pipeline {
    agent {
        docker {
            image 'amazonlinux:2'  
            args '-u root -v /var/run/docker.sock:/var/run/docker.sock'
        }
    }

    environment {
        GIT_REPO_URL = "https://github.com/SUDARAJ/IMB_OS_updates.git"
        REPO_NAME = "864923301006.dkr.ecr.ap-southeast-2.amazonaws.com/support-automations"
        KUBE_NAMESPACE = "support-automations" 
        DEPLOYMENT_NAME = "mail" 
        DOCKER_IMAGE_TAG = "${env.BUILD_NUMBER}"
        IMAGE_TAG = ''
        
    }

    stages {
        stage('Setup AWS CLI, Kubectl & Clone the repo') {
            steps {
                withCredentials([aws(credentialsId: 'aws-cred', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh '''
                    cd /root
                    yum install -y unzip
                    curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
                    unzip -o awscliv2.zip  # Automatically overwrite files without prompting 
                    ./aws/install 
                    aws --version

                    KUBECTL_VERSION=$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)
                    curl -LO "https://dl.k8s.io/release/${KUBECTL_VERSION}/bin/linux/amd64/kubectl"
                    chmod +x ./kubectl
                    mv ./kubectl /usr/local/bin/kubectl
                    kubectl version --client

                    cd /root
                    yum install -y git
                    git clone -b main $GIT_REPO_URL
                    ls -ltr

                    '''
                }
            }
        }

     

        stage('Get the image name & updates the Dockerfile') {
            steps {
                withCredentials([aws(credentialsId: 'aws-cred', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh '''
                    cd /root
                    aws eks --region ap-southeast-2 update-kubeconfig --name stg-eks
                    kubectl get deployment mail -n support-automations -o=jsonpath='{.spec.template.spec.containers[*].image}'
                    image=$(kubectl get deployment $DEPLOYMENT_NAME -n $KUBE_NAMESPACE -o=jsonpath='{.spec.template.spec.containers[*].image}')
                    image_tag=$(echo $image | cut -d':' -f2)
                    IMAGE_TAG="${image_tag}_vulnfix_${BUILD_NUMBER}"
                    
                    echo "IMAGE_TAG=${IMAGE_TAG}" > image_tag.txt
                    cd /root/IMB_OS_updates
                    ls -ltr
                    sed -i "s|^FROM .*|FROM $image|" Dockerfile
                    cat Dockerfile
                    '''
                }
            }
        }

        stage('Setup Docker') {
            steps {
                        sh '''
                        cd /root
                        amazon-linux-extras enable docker > /dev/null 2>&1
                        yum install -y docker > /dev/null 2>&1
                        dockerd &
                        docker --version
                        '''
                }
            }
        

        stage('Build the Docker Image') {
            steps {
                script {
                    // Read the IMAGE_TAG value from the file created in the previous stage
                    def imageTag = readFile('image_tag.txt').trim()
                    env.IMAGE_TAG = imageTag // Assign to the global environment variable
                }
                 withCredentials([aws(credentialsId: 'aws-cred', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh '''
                    cd /root
                    aws ecr get-login-password --region ap-southeast-2 | docker login --username AWS --password-stdin ${REPO_NAME}
                    cd /root/IMB_OS_updates

                    docker build -t ${REPO_NAME}:${IMAGE_TAG} .
                    '''
                }
            }
        }



    }

    post {
        always {
            echo 'Pipeline completed.'
        }
    }
}
