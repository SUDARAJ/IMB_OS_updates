pipeline {
    agent {
        docker {
            image 'amazonlinux:2'  // Use Amazon Linux 2 as the Docker image
            args '-u root'         // Run as root user
        }
    }
    stages {
        stage('Install AWS CLI, kubectl, and yq') {
            steps {
                script {
                    // Update the package manager and install AWS CLI, kubectl, and yq
                    sh '''
                    yum update -y
                    yum install -y aws-cli tar gzip

                    # Install kubectl version 1.24
                    curl -LO "https://dl.k8s.io/release/v1.31.0/bin/linux/amd64/kubectl"
                    chmod +x ./kubectl
                    mv ./kubectl /usr/local/bin/kubectl

                    # Install yq
                    curl -LO "https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64"
                    chmod +x yq_linux_amd64
                    mv yq_linux_amd64 /usr/local/bin/yq

                    # Install eksctl (latest version)
                    curl -sLO "https://github.com/eksctl-io/eksctl/releases/latest/download/eksctl_linux_amd64.tar.gz"
                    tar -xzf eksctl_linux_amd64.tar.gz eksctl
                    mv eksctl /usr/local/bin/
                    rm eksctl_linux_amd64.tar.gz # Cleanup the tar file

                    '''
                }
            }
        }
        stage('Verify Installations') {
            steps {
                script {
                    // Run commands to verify installations
                    sh 'aws --version'
                    sh 'kubectl version --client'
                    sh 'yq --version'
                    sh 'eksctl version'
                }
            }
        }
        stage('Configure AWS Credentials') {
            steps {
                script {
                    // Use the withCredentials block to access AWS credentials
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-cred']]) {
                        // Set AWS environment variables
                        sh '''
                        export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
                        export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
                        export AWS_DEFAULT_REGION=ap-southeast-2  # Change to your desired region
                        '''
                        
                        // Update kubeconfig to connect to the EKS cluster
                        sh '''
                        aws eks --region ap-southeast-2 update-kubeconfig --name stg-eks
                        '''

                        // Debug: Print the kubeconfig file
                        sh 'cat ~/.kube/config'

                        sh '''
                        # Manually add interactiveMode to the kubeconfig file
                        yq eval '.users[] | select(.name == "arn:aws:eks:ap-southeast-2:864923301006:cluster/stg-eks") | .user.exec.interactiveMode = "IfAvailable"' -i ~/.kube/config
                        yq eval '.users[] | select(.name == "arn:aws:eks:ap-southeast-2:864923301006:cluster/stg-eks") | .apiVersion = "client.authentication.k8s.io/v1beta1"' -i /root/.kube/config

                        '''

                        
                        // Debug: Print the kubeconfig file
                        sh 'cat ~/.kube/config'

                        // Optionally, you can run a kubectl command to verify the connection
                        sh 'kubectl get nodes'
                    }
                }
            }
        }
    }
    post {
        always {
            echo 'Pipeline completed.'
        }
    }
}
